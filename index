#!/opt/homebrew/bin/bash

ROOT_DIR=$(dirname "$(readlink -f "$BASH_SOURCE")")


# Source the function file
source "${ROOT_DIR}/find_files_without.sh"

# Print usage information
usage() {
    echo "Usage: ffwo.sh [options] <directory>"
    echo "Find files that don't match certain criteria"
    echo
    echo "Options:"
    echo "  -v, --verbose               Enable verbose output"
    echo "  -p, --print-screen          Print results to screen"
    echo "  -c, --ansi                  Enable ANSI color output"
    echo "  -d, --depth DEPTH           Search depth (default: 2)"
    echo "  -X, --extensions EXT        Additional file extensions to exclude"
    echo "  -D, --directories DIR       Directories to exclude"
    echo "  -S, --substrings STR        Substrings to exclude"
    echo "  -s|--search-dir DIR         Directory to search (default: .)"
    echo "  -t, --type TYPE             Filter by type: f (file), d (directory), l (symlink), x (executable)"
    echo "      --max-size SIZE         Maximum file size to include"
    echo "      --min-size SIZE         Minimum file size to include"
    echo "      --temp-file FILE        Output file for results"
    echo "      --force-create-temp     Force create temp directories"
    echo "      --step                  Enable step-by-step execution"
    echo "      --no-text-files         Filter out text files"
    echo "      --no-package-files      Filter out package files"
    echo "      --no-web-files          Filter out web files"
    echo "      --no-media-files        Filter out media files"
    echo "      --no-image-files        Filter out image files"
    echo "      --no-video-files        Filter out video files"
    echo "      --no-audio-files        Filter out audio files"
    echo "      --no-archive-files      Filter out archive files"
    echo "      --no-database-files     Filter out database files"
    echo "      --no-config-files       Filter out config files"
    echo "      --no-diagram-files      Filter out diagram files"
    echo "      --no-markup-files       Filter out markup files"
    echo "      --no-apple-config-files Filter out Apple config files"
    echo "      --no-programming-files  Filter out programming files"
    echo "      --no-windows-files      Filter out Windows files"
    echo "      --where                 Show script location"
    echo "      --separator SEP         Separator for results"
    echo "      --long                  Use long listing format"
    echo "  -h, --help                  Show this help message"
}

# Function to show error and usage for options requiring values
show_option_error() {
    local option=$1
    echo "Error: $option requires a value"
    echo "Usage: ffwo.sh $option VALUE"
    echo "Use -h or --help to see available options"
    exit 1
}

# Initialize variables with defaults
VERBOSE="false"
PRINT_SCREEN="true"
ANSI="true"
DEPTH="2"
EXTENSIONS=""
DIRECTORIES=""
SUBSTRINGS=""
SEARCH_DIR="."
MAX_SIZE=""
MIN_SIZE=""
FILTER_OUT_TEXT_FILES="false"
FILTER_OUT_PACKAGE_FILES="false"
FILTER_OUT_WEB_FILES="false"
FILTER_OUT_MEDIA_FILES="false"
FILTER_OUT_IMAGE_FILES="false"
FILTER_OUT_VIDEO_FILES="false"
FILTER_OUT_AUDIO_FILES="false"
FILTER_OUT_ARCHIVE_FILES="false"
FILTER_OUT_DATABASE_FILES="false"
FILTER_OUT_CONFIG_FILES="false"
FILTER_OUT_DIAGRAM_FILES="false"
FILTER_OUT_MARKUP_FILES="false"
FILTER_OUT_APPLE_CONFIG_FILES="false"
FILTER_OUT_PROGRAMMING_FILES="false"
FILTER_OUT_WINDOWS_FILES="false"
FORCE_CREATE_TMP="false"
STEP="false"
SEPARATOR="\0"  # Default to newline
LONG="false"
TYPE=""

# Parse command line options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE="true"
            shift
            ;;
        -p|--print-screen)
            PRINT_SCREEN="true"
            shift
            ;;
        -c|--ansi)
            ANSI="true"
            shift
            ;;
        -d|--depth)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--depth"
            fi
            DEPTH="$2"
            shift 2
            ;;
        -X|--extensions)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--extensions"
            fi
            EXTENSIONS="$2"
            shift 2
            ;;
        -D|--directories)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--directories"
            fi
            DIRECTORIES="$2"
            shift 2
            ;;
        -S|--substrings)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--substrings"
            fi
            SUBSTRINGS="$2"
            shift 2
            ;;
        -s|--search-dir)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--search-dir"
            fi
            SEARCH_DIR="$2"
            shift 2
            ;;
        -t|--type)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--type"
            fi
            TYPE="$2"
            shift 2
            ;;
        --max-size)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--max-size"
            fi
            MAX_SIZE="$2"
            shift 2
            ;;
        --min-size)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--min-size"
            fi
            MIN_SIZE="$2"
            shift 2
            ;;
        --temp-file)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--temp-file"
            fi
            TEMP_FILE="$2"
            shift 2
            ;;
        --force-create-temp)
            FORCE_CREATE_TMP="true"
            shift
            ;;
        --step)
            STEP="true"
            shift
            ;;
        --where)
            echo "Script location: $(dirname "$(readlink -f "$0")")"
            exit 0
            ;;
        --no-text-files)
            FILTER_OUT_TEXT_FILES="true"
            shift
            ;;
        --no-package-files)
            FILTER_OUT_PACKAGE_FILES="true"
            shift
            ;;
        --no-web-files)
            FILTER_OUT_WEB_FILES="true"
            shift
            ;;
        --no-media-files)
            FILTER_OUT_MEDIA_FILES="true"
            shift
            ;;
        --no-image-files)
            FILTER_OUT_IMAGE_FILES="true"
            shift
            ;;
        --no-video-files)
            FILTER_OUT_VIDEO_FILES="true"
            shift
            ;;
        --no-audio-files)
            FILTER_OUT_AUDIO_FILES="true"
            shift
            ;;
        --no-archive-files)
            FILTER_OUT_ARCHIVE_FILES="true"
            shift
            ;;
        --no-database-files)
            FILTER_OUT_DATABASE_FILES="true"
            shift
            ;;
        --no-config-files)
            FILTER_OUT_CONFIG_FILES="true"
            shift
            ;;
        --no-diagram-files)
            FILTER_OUT_DIAGRAM_FILES="true"
            shift
            ;;
        --no-markup-files)
            FILTER_OUT_MARKUP_FILES="true"
            shift
            ;;
        --no-apple-config-files)
            FILTER_OUT_APPLE_CONFIG_FILES="true"
            shift
            ;;
        --no-programming-files)
            FILTER_OUT_PROGRAMMING_FILES="true"
            shift
            ;;
        --no-windows-files)
            FILTER_OUT_WINDOWS_FILES="true"
            shift
            ;;
        --separator)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--separator"
            fi
            SEPARATOR="$2"
            shift 2
            ;;
        --long)
            LONG="true"
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help to see available options"
            exit 1
            ;;
    esac
done


# Call the main function with all parameters
find_files_without \
    "search_dir=$SEARCH_DIR" \
    "depth=$DEPTH" \
    "extensions=$EXTENSIONS" \
    "directories=$DIRECTORIES" \
    "substrings=$SUBSTRINGS" \
    "filter_out_text_files=$FILTER_OUT_TEXT_FILES" \
    "filter_out_package_files=$FILTER_OUT_PACKAGE_FILES" \
    "filter_out_web_files=$FILTER_OUT_WEB_FILES" \
    "filter_out_media_files=$FILTER_OUT_MEDIA_FILES" \
    "filter_out_image_files=$FILTER_OUT_IMAGE_FILES" \
    "filter_out_video_files=$FILTER_OUT_VIDEO_FILES" \
    "filter_out_audio_files=$FILTER_OUT_AUDIO_FILES" \
    "filter_out_archive_files=$FILTER_OUT_ARCHIVE_FILES" \
    "filter_out_database_files=$FILTER_OUT_DATABASE_FILES" \
    "filter_out_config_files=$FILTER_OUT_CONFIG_FILES" \
    "filter_out_diagram_files=$FILTER_OUT_DIAGRAM_FILES" \
    "filter_out_markup_files=$FILTER_OUT_MARKUP_FILES" \
    "filter_out_apple_config_files=$FILTER_OUT_APPLE_CONFIG_FILES" \
    "filter_out_programming_files=$FILTER_OUT_PROGRAMMING_FILES" \
    "filter_out_windows_files=$FILTER_OUT_WINDOWS_FILES" \
    "ansi=$ANSI" \
    "print_screen=$PRINT_SCREEN" \
    "verbose=$VERBOSE" \
    "force_create_tmp=$FORCE_CREATE_TMP" \
    "step=$STEP" \
    "max_size=$MAX_SIZE" \
    "min_size=$MIN_SIZE" \
    "separator=$SEPARATOR" \
    "long=$LONG" \
    "type=$TYPE"