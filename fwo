#!/bin/bash

# Print usage information
usage() {
    echo "Usage: ffwo.sh [options] <directory>"
    echo "Find files that don't match certain criteria"
    echo
    echo "Options:"
    echo "  -v, --verbose            Enable verbose output"
    echo "  -p, --print-screen      Print results to screen"
    echo "  -c, --ansi              Enable ANSI color output"
    echo "  -d, --depth DEPTH       Search depth (default: 2)"
    echo "  -X, --extensions EXT    Additional file extensions to exclude"
    echo "  -D, --directories DIR   Directories to exclude"
    echo "  -S, --substrings STR    Substrings to exclude"
    echo "  -s|--search-dir DIR    Directory to search (default: .)"
    echo "      --max-size SIZE     Maximum file size to include"
    echo "      --min-size SIZE     Minimum file size to include"
    echo "      --temp-file FILE    Output file for results"
    echo "      --force-create-temp Force create temp directories"
    echo "      --step              Enable step-by-step execution"
    echo "      --no-text-files     Disable text file exclusions"
    echo "      --no-package-files  Disable package file exclusions"
    echo "      --no-web-files      Disable web file exclusions"
    echo "      --no-media-files    Disable media file exclusions"
    echo "      --no-image-files    Disable image file exclusions"
    echo "      --no-video-files    Disable video file exclusions"
    echo "      --no-audio-files    Disable audio file exclusions"
    echo "      --no-archive-files  Disable archive file exclusions"
    echo "      --no-database-files Disable database file exclusions"
    echo "      --no-config-files   Disable config file exclusions"
    echo "      --no-diagram-files  Disable diagram file exclusions"
    echo "      --no-markup-files   Disable markup file exclusions"
    echo "      --no-apple-config-files Disable Apple config file exclusions"
    echo "      --no-programming-files  Disable programming file exclusions"
    echo "      --no-windows-files  Disable Windows file exclusions"
    echo "      --where             Show script location"
    echo "  -h, --help              Show this help message"
}

# Function to show error and usage for options requiring values
show_option_error() {
    local option=$1
    echo "Error: $option requires a value"
    echo "Usage: ffwo.sh $option VALUE"
    echo "Use -h or --help to see available options"
    exit 1
}

# Initialize variables with defaults
VERBOSE="false"
PRINT_SCREEN="true"
ANSI="true"
DEPTH="2"
EXTENSIONS=""
DIRECTORIES=""
SUBSTRINGS=""
SEARCH_DIR="."
MAX_SIZE=""
MIN_SIZE=""
USE_TEXT_FILES="true"
USE_PACKAGE_FILES="true"
USE_WEB_FILES="true"
USE_MEDIA_FILES="true"
USE_IMAGE_FILES="true"
USE_VIDEO_FILES="true"
USE_AUDIO_FILES="true"
USE_ARCHIVE_FILES="true"
USE_DATABASE_FILES="true"
USE_CONFIG_FILES="true"
USE_DIAGRAM_FILES="true"
USE_MARKUP_FILES="true"
USE_APPLE_CONFIG_FILES="true"
USE_PROGRAMMING_FILES="true"
USE_WINDOWS_FILES="true"
FORCE_CREATE_TMP="false"
STEP="false"

# Parse command line options
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            VERBOSE="true"
            shift
            ;;
        -p|--print-screen)
            PRINT_SCREEN="true"
            shift
            ;;
        -c|--ansi)
            ANSI="true"
            shift
            ;;
        -d|--depth)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--depth"
            fi
            DEPTH="$2"
            shift 2
            ;;
        -X|--extensions)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--extensions"
            fi
            EXTENSIONS="$2"
            shift 2
            ;;
        -D|--directories)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--directories"
            fi
            DIRECTORIES="$2"
            shift 2
            ;;
        -S|--substrings)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--substrings"
            fi
            SUBSTRINGS="$2"
            shift 2
            ;;
        -s|--search-dir)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--search-dir"
            fi
            SEARCH_DIR="$2"
            shift 2
            ;;
        --max-size)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--max-size"
            fi
            MAX_SIZE="$2"
            shift 2
            ;;
        --min-size)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--min-size"
            fi
            MIN_SIZE="$2"
            shift 2
            ;;
        --temp-file)
            if [[ -z "$2" || "$2" =~ ^- ]]; then
                show_option_error "--temp-file"
            fi
            TEMP_FILE="$2"
            shift 2
            ;;
        --force-create-temp)
            FORCE_CREATE_TMP="true"
            shift
            ;;
        --step)
            STEP="true"
            shift
            ;;
        --where)
            echo "Script location: $(dirname "$(readlink -f "$0")")"
            exit 0
            ;;
        --no-text-files)
            USE_TEXT_FILES="false"
            shift
            ;;
        --no-package-files)
            USE_PACKAGE_FILES="false"
            shift
            ;;
        --no-web-files)
            USE_WEB_FILES="false"
            shift
            ;;
        --no-media-files)
            USE_MEDIA_FILES="false"
            shift
            ;;
        --no-image-files)
            USE_IMAGE_FILES="false"
            shift
            ;;
        --no-video-files)
            USE_VIDEO_FILES="false"
            shift
            ;;
        --no-audio-files)
            USE_AUDIO_FILES="false"
            shift
            ;;
        --no-archive-files)
            USE_ARCHIVE_FILES="false"
            shift
            ;;
        --no-database-files)
            USE_DATABASE_FILES="false"
            shift
            ;;
        --no-config-files)
            USE_CONFIG_FILES="false"
            shift
            ;;
        --no-diagram-files)
            USE_DIAGRAM_FILES="false"
            shift
            ;;
        --no-markup-files)
            USE_MARKUP_FILES="false"
            shift
            ;;
        --no-apple-config-files)
            USE_APPLE_CONFIG_FILES="false"
            shift
            ;;
        --no-programming-files)
            USE_PROGRAMMING_FILES="false"
            shift
            ;;
        --no-windows-files)
            USE_WINDOWS_FILES="false"
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help to see available options"
            exit 1
            ;;
    esac
done

# Source the function file
source "$(dirname "$0")/find_files_without.sh"

# Call the main function with all parameters
find_files_without \
    "search_dir=$SEARCH_DIR" \
    "depth=$DEPTH" \
    "extensions=$EXTENSIONS" \
    "directories=$DIRECTORIES" \
    "substrings=$SUBSTRINGS" \
    "use_text_files=$USE_TEXT_FILES" \
    "use_package_files=$USE_PACKAGE_FILES" \
    "use_web_files=$USE_WEB_FILES" \
    "use_media_files=$USE_MEDIA_FILES" \
    "use_image_files=$USE_IMAGE_FILES" \
    "use_video_files=$USE_VIDEO_FILES" \
    "use_audio_files=$USE_AUDIO_FILES" \
    "use_archive_files=$USE_ARCHIVE_FILES" \
    "use_database_files=$USE_DATABASE_FILES" \
    "use_config_files=$USE_CONFIG_FILES" \
    "use_diagram_files=$USE_DIAGRAM_FILES" \
    "use_markup_files=$USE_MARKUP_FILES" \
    "use_apple_config_files=$USE_APPLE_CONFIG_FILES" \
    "use_programming_files=$USE_PROGRAMMING_FILES" \
    "use_windows_files=$USE_WINDOWS_FILES" \
    "ansi=$ANSI" \
    "print_screen=$PRINT_SCREEN" \
    "verbose=$VERBOSE" \
    "force_create_tmp=$FORCE_CREATE_TMP" \
    "step=$STEP" \
    "max_size=$MAX_SIZE" \
    "min_size=$MIN_SIZE"